{"version":3,"sources":["components/common/NavigationBar.tsx","components/common/CustomHooks.tsx","components/pages/Profile.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["navigationBarStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","drawerStyles","list","width","navBarButtonProperties","fontFamily","navBarIconProperties","paddingRight","NavigationBar","anchor","navigationBarClasses","drawerClasses","size","useState","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","left","drawerState","setDrawerState","toggleDrawer","open","event","type","key","className","AppBar","position","Toolbar","Typography","variant","style","Button","color","fontSize","IconButton","edge","aria-label","onClick","Drawer","onClose","role","onKeyDown","List","map","text","index","ListItem","button","ListItemIcon","ListItemText","primary","Divider","Profile","App","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0feb1976.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { useWindowSize } from \"../common/CustomHooks\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport MenuBookIcon from \"@material-ui/icons/MenuBook\";\nimport LaptopIcon from \"@material-ui/icons/Laptop\";\nimport WorkOutlineIcon from \"@material-ui/icons/WorkOutline\";\nimport AccountTreeIcon from \"@material-ui/icons/AccountTree\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nconst navigationBarStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nconst drawerStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n});\n\nconst navBarButtonProperties = {\n  fontFamily: \"'Montserrat', sans-serif\",\n};\n\nconst navBarIconProperties = {\n  paddingRight: \"5px\",\n};\n\ntype Anchor = \"left\";\n\nexport default function NavigationBar() {\n  const navigationBarClasses = navigationBarStyles();\n  const drawerClasses = drawerStyles();\n  const size = useWindowSize();\n\n  const [drawerState, setDrawerState] = useState({\n    left: false,\n  });\n\n  const toggleDrawer = (anchor: Anchor, open: boolean) => (\n    event: React.KeyboardEvent | React.MouseEvent\n  ) => {\n    if (\n      event.type === \"keydown\" &&\n      ((event as React.KeyboardEvent).key === \"Tab\" ||\n        (event as React.KeyboardEvent).key === \"Shift\")\n    ) {\n      return;\n    }\n\n    setDrawerState({ ...drawerState, [anchor]: open });\n  };\n\n  const list = (anchor: Anchor) => (\n    <div\n      className={drawerClasses.list}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      <List>\n        {[\"Inbox\", \"Starred\", \"Send email\", \"Drafts\"].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List>\n        {[\"All mail\", \"Trash\", \"Spam\"].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  if (size.width > 1005) {\n    return (\n      <div className={navigationBarClasses.root}>\n        <AppBar position=\"fixed\">\n          <Toolbar>\n            <Typography\n              variant=\"h6\"\n              className={navigationBarClasses.title}\n              style={navBarButtonProperties}\n            >\n              HOSSANEE Muhammad Idjaz Ali\n            </Typography>\n            <Button color=\"inherit\" style={navBarButtonProperties}>\n              <HomeIcon fontSize=\"small\" style={navBarIconProperties} />\n              Home\n            </Button>\n            <Button color=\"inherit\" style={navBarButtonProperties}>\n              <MenuBookIcon fontSize=\"small\" style={navBarIconProperties} />\n              Education\n            </Button>\n            <Button color=\"inherit\" style={navBarButtonProperties}>\n              <LaptopIcon fontSize=\"small\" style={navBarIconProperties} />\n              Skills\n            </Button>\n            <Button color=\"inherit\" style={navBarButtonProperties}>\n              <WorkOutlineIcon fontSize=\"small\" style={navBarIconProperties} />\n              Work Experience\n            </Button>\n            <Button color=\"inherit\" style={navBarButtonProperties}>\n              <AccountTreeIcon fontSize=\"small\" style={navBarIconProperties} />\n              Projects\n            </Button>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  } else {\n    return (\n      <div className={navigationBarClasses.root}>\n        <AppBar position=\"fixed\">\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              className={navigationBarClasses.menuButton}\n              color=\"inherit\"\n              aria-label=\"menu\"\n            >\n              <MenuIcon onClick={toggleDrawer(\"left\", true)} />\n              <Drawer\n                anchor=\"left\"\n                open={drawerState[\"left\"]}\n                onClose={toggleDrawer(\"left\", false)}\n              >\n                {list(\"left\")}\n              </Drawer>\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n}\n","import { useState, useEffect } from \"react\";\n\n// Hook\nexport function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: 0,\n    height: 0,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n","import React from \"react\";\nimport NavigationBar from \"../common/NavigationBar\";\n\nexport default function Profile() {\n  return <NavigationBar />;\n}\n","import React from \"react\";\nimport Profile from \"./components/pages/Profile\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <Profile />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}